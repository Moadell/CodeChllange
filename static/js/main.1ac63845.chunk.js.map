{"version":3,"sources":["components/card.js","components/Container.js","App.js","reportWebVitals.js","index.js"],"names":["repo","name","html_url","description","stargazers_count","open_issues_count","pushed_at","owner","login","avatar_url","Optmize","number","toFixed","toString","Card","body","onClick","window","open","style","backgroundColor","borderColor","margin","Row","Col","maxWidth","src","alt","CardTitle","CardText","push_date","dateDiff","Date","now","parse","Math","ceil","GetDateInterval","Wraper","styled","div","repositories","onPageChange","dataLength","length","next","hasMore","map","id","App","useState","Data","setData","pageIndex","setPageIndex","GenerateStarDate","date","setDate","getDate","month","getMonth","day","getFullYear","fetchData","a","startdate","API_REQUEST","axios","get","data","items","useEffect","Container","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wTAMc,cAAa,IAAXA,EAAU,EAAVA,KAEPC,EAODD,EAPCC,KACAC,EAMDF,EANCE,SACAC,EAKDH,EALCG,YACAC,EAIDJ,EAJCI,iBACAC,EAGDL,EAHCK,kBACAC,EAEDN,EAFCM,UACAC,EACDP,EADCO,MAEGC,EAAkBD,EAAlBC,MAAMC,EAAYF,EAAZE,WAMPC,EAAU,SAAAC,GAGZ,OAFGA,GAAQ,MACXA,GAAQA,EAAO,KAAMC,QAAQ,GAAGC,WAAW,KACpCF,GAEZ,OACE,mCACA,cAACG,EAAA,EAAD,CAAMC,MAAI,EAACC,QAAS,WACMC,OAAOC,KAAKhB,IACZiB,MAAO,CAAEC,gBAAiB,OAAQC,YAAa,OAASC,OAAO,UAFzF,SAIE,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAKL,MAAO,CAAEM,SAAS,OAAvB,SAEA,qBAAKC,IAAKjB,EAAYkB,IAAM,SAASR,MAAO,CAAEM,SAAS,8BAEvD,eAACD,EAAA,EAAD,WACM,cAACI,EAAA,EAAD,UAAY3B,IACZ,cAAC4B,EAAA,EAAD,UAAW1B,IACX,eAACoB,EAAA,EAAD,WACJ,cAACC,EAAA,EAAD,CAAKL,MAAO,CAAEM,SAAS,eAAvB,SACK,eAACG,EAAA,EAAD,qBAAmBlB,EAAQN,GAA3B,SAEL,eAACyB,EAAA,EAAD,sBAAmBnB,EAAQL,GAA3B,OACA,cAACmB,EAAA,EAAD,UACA,eAACK,EAAA,EAAD,2BAAwBrB,EAAxB,IA7Be,SAAAsB,GACtB,IAAMC,EAAW,IAAIC,KAAKA,KAAKC,MAAQD,KAAKE,MAAMJ,IAClD,OAAOK,KAAKC,KAAKL,EAAQ,OA2BcM,CAAgB/B,GAAhD,+B,gBC1CDgC,EAAOC,IAAOC,IAAR,wFAMJ,cAAkC,IAAhCC,EAA+B,EAA/BA,aAAaC,EAAkB,EAAlBA,aAE1B,OACG,cAACJ,EAAD,UACC,cAAC,IAAD,CACIK,WAAYF,EAAaG,OACzBC,KAAM,kBAAIH,KACVI,SAAS,EAHb,SAKKL,EAAaM,KAAI,SAAC/C,GAAD,OAAS,cAAC,EAAD,CAAoBA,KAAMA,GAAfA,EAAKgD,Y,MCsBxCC,MArCf,WACE,MAAqBC,mBAAS,IAA9B,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAA+BF,mBAAS,GAAxC,mBAAOG,EAAP,KAAiBC,EAAjB,KAEMC,EAAkB,WACtB,IAAIC,EAAM,IAAIxB,KACdwB,EAAKC,QAAQD,EAAKE,UAAY,IAC9B,IAAIC,GAASH,EAAKI,WAAW,GAAG/C,WAC5BgD,EAAML,EAAKE,UAAU7C,WAMzB,OALGgD,EAAIjB,OAAO,IACdiB,EAAI,IAAIA,GACLF,EAAMf,OAAO,IAChBe,EAAM,IAAIA,GACOH,EAAKM,cAAc,IAAIH,EAAM,IAAIE,GAQ9CE,EAAS,uCAAE,kCAAAC,EAAA,6DACTC,EAAUV,IACVW,EAFS,gEAE4DD,EAF5D,uCAEoGZ,GAFpG,SAGKc,IAAMC,IAAIF,GAHf,gBAGRG,EAHQ,EAGRA,KACPjB,EAAQ,GAAD,mBAAKD,GAAL,YAAakB,EAAKC,SAJV,2CAAF,qDAWf,OAJAC,qBAAU,WACRR,MACC,CAACV,IAGF,cAACmB,EAAD,CAAW9B,aAhBI,WACfY,EAAaD,EAAU,IAeYZ,aAAcU,EAAMsB,UAAU,SC1BtDC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.1ac63845.chunk.js","sourcesContent":["import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {\r\n     Card, CardTitle, CardText, Row, Col\r\n    \r\n  } from 'reactstrap';\r\nexport default({repo}) => {\r\n    const  {\r\n         name,\r\n         html_url,\r\n         description,\r\n         stargazers_count,\r\n         open_issues_count,\r\n         pushed_at,\r\n         owner\r\n     }= repo;\r\n     const {login,avatar_url}=owner;\r\n \r\n     const GetDateInterval = push_date=>{\r\n       const dateDiff = new Date(Date.now() - Date.parse(push_date));\r\n       return Math.ceil(dateDiff / (1000 * 60 * 60 * 24));\r\n     }\r\n     const Optmize = number =>{\r\n         if(number>=1000)\r\n         number=(number/1000).toFixed(1).toString()+\"K\";\r\n         return number;\r\n     }\r\n    return (\r\n      <>\r\n      <Card body onClick={() => {\r\n                                window.open(html_url);\r\n                            }}  style={{ backgroundColor: '#fff', borderColor: '#333' , margin:'20px 0' }}>\r\n        \r\n        <Row>\r\n            <Col style={{ maxWidth:\"20%\" }}>\r\n                \r\n            <img src={avatar_url} alt = 'avatar' style={{ maxWidth:\"-webkit-fill-available\" }} />\r\n            </Col>\r\n            <Col>\r\n                  <CardTitle>{name}</CardTitle>\r\n                  <CardText>{description}</CardText>\r\n                  <Row>\r\n              <Col style={{ maxWidth:\"fit-content\" }}>\r\n                   <CardTitle>Stars: {Optmize(stargazers_count)} </CardTitle>\r\n              </Col>\r\n              <CardText>Issues: {Optmize(open_issues_count)} </CardText>\r\n              <Col>\r\n              <CardText>submitted by {login} {GetDateInterval(pushed_at)} days ago</CardText>\r\n              </Col>\r\n                </Row>\r\n            </Col>      \r\n            </Row>   \r\n                </Card>\r\n        </>\r\n    );\r\n};","import React from 'react';\r\nimport Card from './card'\r\nimport styled from \"styled-components\"\r\nimport InfiniteScroll from 'react-infinite-scroll-component';\r\n\r\nexport const Wraper=styled.div`\r\n    margin: 0 auto;\r\n    width:80%;\r\n    min-height:100vh;\r\n`; \r\n\r\nexport default ({repositories,onPageChange}) => {\r\n    \r\n    return (\r\n       <Wraper>\r\n        <InfiniteScroll \r\n            dataLength={repositories.length}\r\n            next={()=>onPageChange()}\r\n            hasMore={true}>\r\n            {\r\n             repositories.map((repo)=> <Card key={repo.id} repo={repo}/>)\r\n            }\r\n        </InfiniteScroll>\r\n       </Wraper>\r\n    );\r\n} ;","import React,{useState,useEffect}from 'react';\nimport axios from 'axios'\nimport Container from './components/Container';\nimport './App.css';\n\nfunction App() {\n  const [Data,setData]=useState([]);\n  const [pageIndex,setPageIndex]=useState(1);\n\n  const GenerateStarDate= ()=>{\n    let date= new Date();\n    date.setDate(date.getDate() - 30);\n    let month = (date.getMonth()+1).toString();\n    let day = date.getDate().toString();\n    if(day.length<2)\n    day=\"0\"+day;\n    if(month.length<2)\n    month=\"0\"+month;\n    const stringDate=date.getFullYear()+\"-\"+month+\"-\"+day;\n    return stringDate;\n  }\n\n  const Paginate = ()=>{\n    setPageIndex(pageIndex+1)\n  }\n\n  const fetchData= async ()=>{\n    const startdate=GenerateStarDate();\n    const API_REQUEST=`https://api.github.com/search/repositories?q=created:>${startdate}&sort=stars&order=desc&page=${pageIndex}`;\n    const {data}= await axios.get(API_REQUEST);\n    setData([...Data,...data.items]);\n  }\n\n  useEffect(() => {\n    fetchData();  \n  }, [pageIndex]);\n  \n  return (\n    <Container onPageChange={Paginate} repositories={Data} className=\"App\"/>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}